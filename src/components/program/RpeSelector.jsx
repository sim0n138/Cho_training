import { useState } from 'react';
import PropTypes from 'prop-types';
import Button from '../ui/Button';
import './RpeSelector.css';

/**
 * Modal component for selecting RPE (Rate of Perceived Exertion)
 * @param {Object} props - Component props
 * @param {number} props.currentRpe - Current RPE value
 * @param {Function} props.onSave - Callback when RPE is saved
 * @param {Function} props.onClose - Callback when modal is closed
 */
function RpeSelector({ currentRpe, onSave, onClose, recommendations }) {
  const [selectedRpe, setSelectedRpe] = useState(currentRpe);

  const handleSave = () => {
    onSave(selectedRpe);
    onClose();
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      onClose();
    } else if (e.key === 'Enter') {
      handleSave();
    }
  };

  return (
    <div
      className="modal-overlay"
      onClick={onClose}
      role="dialog"
      aria-modal="true"
      aria-labelledby="rpe-modal-title"
    >
      <div
        className="modal-content"
        onClick={(e) => e.stopPropagation()}
        onKeyDown={handleKeyDown}
      >
        <h2 id="rpe-modal-title">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏ (RPE)</h2>

        {recommendations && recommendations.message && (
          <div className="wellbeing-recommendations">
            <p className="recommendation-message">
              üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è:
            </p>
            <p className="recommendation-rpe">
              –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:{' '}
              <strong>{recommendations.suggestedRPE}</strong>/10
            </p>
            <p className="recommendation-reason">{recommendations.message}</p>
          </div>
        )}

        <div className="rpe-scale">
          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((value) => (
            <button
              key={value}
              className={`rpe-button ${selectedRpe === value ? 'selected' : ''}`}
              onClick={() => setSelectedRpe(value)}
              aria-label={`RPE ${value}`}
            >
              {value}
            </button>
          ))}
        </div>
        <div className="rpe-description">
          <p>
            <strong>1-3:</strong> –û—á–µ–Ω—å –ª–µ–≥–∫–æ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
          </p>
          <p>
            <strong>4-6:</strong> –£–º–µ—Ä–µ–Ω–Ω–æ, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
          </p>
          <p>
            <strong>7-8:</strong> –¢—è–∂–µ–ª–æ, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞
          </p>
          <p>
            <strong>9-10:</strong> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ, –ø—Ä–µ–¥–µ–ª—å–Ω—ã–µ —É—Å–∏–ª–∏—è
          </p>
        </div>
        <div className="modal-actions">
          <Button onClick={handleSave} variant="primary">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button onClick={onClose} variant="secondary">
            –û—Ç–º–µ–Ω–∞
          </Button>
        </div>
      </div>
    </div>
  );
}

RpeSelector.propTypes = {
  currentRpe: PropTypes.number.isRequired,
  onSave: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
  recommendations: PropTypes.shape({
    suggestedRPE: PropTypes.number,
    message: PropTypes.string,
    painAreas: PropTypes.arrayOf(PropTypes.string),
  }),
};

export default RpeSelector;
