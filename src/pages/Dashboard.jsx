/**
 * Dashboard page component
 * Main landing page showing current status, workout recommendations, and data management
 */
import { Link } from 'react-router-dom';
import { useState, useEffect, useRef } from 'react';
import Layout from '../components/layout/Layout';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import useWellbeingData from '../hooks/useWellbeingData';
import recommendationService from '../services/recommendationService';
import exportService from '../services/exportService';
import './Dashboard.css';

/**
 * Dashboard component - main hub for the application
 * Displays current wellbeing status, workout recommendations, and data management tools
 */
function Dashboard() {
  const { latestLog, stats } = useWellbeingData();
  const [greeting, setGreeting] = useState('');
  const [recommendation, setRecommendation] = useState(null);
  const [importStatus, setImportStatus] = useState(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    // Set dynamic greeting based on time of day
    const hour = new Date().getHours();
    if (hour < 12) {
      setGreeting('–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!');
    } else if (hour < 18) {
      setGreeting('–î–æ–±—Ä—ã–π –¥–µ–Ω—å!');
    } else {
      setGreeting('–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!');
    }
  }, []);

  useEffect(() => {
    // Get workout recommendation based on latest log
    const rec = recommendationService.getRecommendation(latestLog);
    setRecommendation(rec);
  }, [latestLog]);

  /**
   * Handle export of all training logs to JSON file
   */
  const handleExport = () => {
    try {
      exportService.downloadLogsAsJSON();
    } catch (error) {
      console.error('Export failed:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  };

  /**
   * Trigger file input click for import
   */
  const handleImportClick = () => {
    fileInputRef.current?.click();
  };

  /**
   * Handle import of training logs from JSON file
   * @param {Event} event - File input change event
   */
  const handleImport = async (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const result = await exportService.importLogsFromFile(file, true);
      if (result.success) {
        setImportStatus({
          type: 'success',
          message: result.message,
        });
        // Reload page to update data
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        setImportStatus({
          type: 'error',
          message: result.message,
        });
      }
    } catch (err) {
      console.error('Import failed:', err);
      setImportStatus({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö',
      });
    }

    // Clear input
    event.target.value = '';
  };

  return (
    <Layout>
      <section className="summary-section">
        <h2>{greeting}</h2>
        <p>Your personal training tracker</p>
      </section>

      <section className="quick-access">
        <Card>
          <h3>Current Status</h3>
          {latestLog ? (
            <div className="status-summary">
              <p className="status-item">
                <strong>–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞:</strong> {latestLog.sleepQuality}/5
              </p>
              <p className="status-item">
                <strong>–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏:</strong> {latestLog.energyLevel}/5
              </p>
              <p className="status-item">
                <strong>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</strong> {latestLog.mood}
              </p>
              {latestLog.musclePain && latestLog.musclePain.length > 0 && (
                <p className="status-item">
                  <strong>–ú—ã—à–µ—á–Ω–∞—è –±–æ–ª—å:</strong>{' '}
                  {latestLog.musclePain.join(', ')}
                </p>
              )}
              <p className="last-update">
                –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:{' '}
                {new Date(latestLog.date).toLocaleDateString('ru-RU')}
              </p>
            </div>
          ) : (
            <div className="empty-status">
              <p>
                –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
                –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
              </p>
            </div>
          )}
          <Link to="/log">
            <Button variant="primary">
              {latestLog ? '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : '–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'}
            </Button>
          </Link>
        </Card>

        <Card>
          <h3>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h3>
          {recommendation && (
            <div className="recommendation">
              <div
                className={`intensity-badge intensity-${recommendation.intensity}`}
              >
                {recommendation.intensity === 'low' && '–ù–∏–∑–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'}
                {recommendation.intensity === 'moderate' &&
                  '–°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'}
                {recommendation.intensity === 'high' && '–í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å'}
                {recommendation.intensity === 'none' && '–û—Ç–¥—ã—Ö'}
              </div>
              <h4>{recommendation.title}</h4>
              <p>{recommendation.description}</p>
              {recommendation.activities && (
                <div className="activities-list">
                  <strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong>
                  <ul>
                    {recommendation.activities.map((activity, index) => (
                      <li key={index}>{activity}</li>
                    ))}
                  </ul>
                </div>
              )}
              {stats.logsThisWeek > 0 && (
                <p className="motivation">
                  üí™{' '}
                  {recommendationService.getMotivationMessage(
                    stats.logsThisWeek
                  )}
                </p>
              )}
            </div>
          )}
        </Card>

        <Card>
          <h3>Quick Stats</h3>
          <p>View your progress and statistics</p>
          <Link to="/stats">
            <Button variant="secondary">View Statistics</Button>
          </Link>
        </Card>
      </section>

      <section className="data-management">
        <Card>
          <h3>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
          <p>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö</p>
          <div className="data-actions">
            <Button onClick={handleExport} variant="outline">
              üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </Button>
            <Button onClick={handleImportClick} variant="outline">
              üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </Button>
            <input
              ref={fileInputRef}
              type="file"
              accept=".json"
              onChange={handleImport}
              style={{ display: 'none' }}
            />
          </div>
          {importStatus && (
            <div
              className={`import-status ${importStatus.type === 'success' ? 'success' : 'error'}`}
            >
              {importStatus.message}
            </div>
          )}
          <p className="data-info">
            üí° –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞—Å—Ç JSON —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –≤–∞—à–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏. –ò–º–ø–æ—Ä—Ç
            –æ–±—ä–µ–¥–∏–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏.
          </p>
        </Card>
      </section>
    </Layout>
  );
}

export default Dashboard;
